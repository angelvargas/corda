[INFO ] 2019-09-02T16:16:53,271Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:16:53,318Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar {}
[INFO ] 2019-09-02T16:16:53,371Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-02T16:16:55,920Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:16:55,920Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar {}
[INFO ] 2019-09-02T16:16:55,951Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-02T16:16:57,659Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:16:57,659Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar {}
[INFO ] 2019-09-02T16:16:57,682Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-02T16:16:57,845Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:16:57,845Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar {}
[INFO ] 2019-09-02T16:16:57,874Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:16:58,002Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-02T16:16:58,002Z [main] contracts.TransactionState.<init> - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2019-09-02T16:16:58,705Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:16:58,705Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar {}
[INFO ] 2019-09-02T16:16:58,728Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-02T16:16:59,522Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:16:59,522Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar {}
[INFO ] 2019-09-02T16:16:59,545Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-02T16:17:00,481Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:17:00,481Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar {}
[INFO ] 2019-09-02T16:17:00,504Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-02T16:17:01,749Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:17:01,757Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161652.806/custom-cordapp_1_4_5880fc1f-2a39-4bb7-bb38-72e24562a8be.jar {}
[INFO ] 2019-09-02T16:17:01,775Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:17:01,879Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-09-02T16:18:00,790Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161800.372/custom-cordapp_1_4_06483800-1a16-4b9c-beea-84195716d600.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:18:00,812Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161800.372/custom-cordapp_1_4_06483800-1a16-4b9c-beea-84195716d600.jar {}
[INFO ] 2019-09-02T16:18:00,861Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:18:01,598Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-09-02T16:18:29,073Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161828.688/custom-cordapp_1_4_6eef4d16-edb8-4346-a40c-a7424ca69664.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:18:29,105Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-161828.688/custom-cordapp_1_4_6eef4d16-edb8-4346-a40c-a7424ca69664.jar {}
[INFO ] 2019-09-02T16:18:29,142Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:18:29,875Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-09-02T16:20:32,401Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-162032.016/custom-cordapp_1_4_0f092df2-51d1-4513-8a34-9f59155049ad.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:20:32,432Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-162032.016/custom-cordapp_1_4_0f092df2-51d1-4513-8a34-9f59155049ad.jar {}
[INFO ] 2019-09-02T16:20:32,479Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:20:33,218Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-09-02T16:34:49,964Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-163449.563/custom-cordapp_1_4_76b2c705-4eef-40b6-ad9b-d572b9ba516e.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:34:49,986Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-163449.563/custom-cordapp_1_4_76b2c705-4eef-40b6-ad9b-d572b9ba516e.jar {}
[INFO ] 2019-09-02T16:34:50,032Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:34:50,766Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-09-02T16:42:00,751Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-164200.344/custom-cordapp_1_4_4408e394-aeca-4a68-9889-a87887a0b255.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:42:00,782Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-164200.344/custom-cordapp_1_4_4408e394-aeca-4a68-9889-a87887a0b255.jar {}
[INFO ] 2019-09-02T16:42:00,827Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:42:01,568Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-09-02T16:44:54,843Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-164454.405/custom-cordapp_1_4_62c3efd0-106f-4db2-a3a1-8261e8c574ba.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:44:54,874Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-164454.405/custom-cordapp_1_4_62c3efd0-106f-4db2-a3a1-8261e8c574ba.jar {}
[INFO ] 2019-09-02T16:44:54,928Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:46:02,159Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-09-02T16:46:16,146Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-164615.668/custom-cordapp_1_4_22516dca-6ab5-4398-86cf-2b7e76be1342.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:46:16,162Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-164615.668/custom-cordapp_1_4_22516dca-6ab5-4398-86cf-2b7e76be1342.jar {}
[INFO ] 2019-09-02T16:46:16,219Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:46:30,970Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-09-02T16:47:04,563Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-164704.176/custom-cordapp_1_4_043fcef6-0499-418d-ae9e-54984eef3e42.jar, rootPackageName=null) {}
[INFO ] 2019-09-02T16:47:04,579Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/generated-custom-cordapps/20190902-164704.176/custom-cordapp_1_4_043fcef6-0499-418d-ae9e-54984eef3e42.jar {}
[INFO ] 2019-09-02T16:47:04,632Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-02T16:47:05,396Z [main] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[INFO ] 2019-09-03T00:15:35,143Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\angel\Documents\corda\bootcamp-cordapp ... {}
[INFO ] 2019-09-03T00:16:05,811Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001532.622\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:16:05,813Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001532.622/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:16:05,824Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001532.622/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:16:05,995Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:16:06,231Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:16:06,297Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:06,297Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:06,301Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:06,409Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:15:32.586Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:16:08,594Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:16:08,597Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001532.622\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:16:08,598Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:16:08,599Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:16:08,626Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:08,628Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:09,362Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:09,555Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:16:09,590Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:16:09,604Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:09,604Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:09,750Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:09,756Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:16:09,756Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469769756) {}
[INFO ] 2019-09-03T00:16:09,760Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:16:09,856Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469769756) {}
[INFO ] 2019-09-03T00:16:09,888Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:16:09,897Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469769756) {}
[INFO ] 2019-09-03T00:16:09,911Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:16:10,057Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:16:10,060Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:16:10,061Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:16:10,301Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001610.191\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:16:10,302Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001610.191/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:16:10,302Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001610.191/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:16:10,437Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:16:10,449Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:16:10,458Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:10,458Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:10,458Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:10,461Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:16:10.191Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:16:10,853Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:16:10,855Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001610.191\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:16:10,855Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:16:10,857Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:16:10,858Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:10,859Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:10,915Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:10,923Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:16:10,944Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:16:10,949Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:10,949Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:11,023Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:11,027Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:16:11,027Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469771027) {}
[INFO ] 2019-09-03T00:16:11,027Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:16:11,051Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469771027) {}
[INFO ] 2019-09-03T00:16:11,066Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:16:11,069Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469771027) {}
[INFO ] 2019-09-03T00:16:11,075Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:16:11,233Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:16:11,235Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:16:11,235Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:16:11,339Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001611.241\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:16:11,339Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001611.241/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:16:11,340Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001611.241/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:16:11,446Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:16:11,461Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:16:11,478Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:11,478Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:11,478Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:11,483Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:16:11.241Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:16:11,773Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:16:11,775Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001611.241\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:16:11,775Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:16:11,776Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:16:11,778Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:11,778Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:11,825Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:11,833Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:16:11,849Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:16:11,855Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:11,855Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:11,937Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:11,941Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:16:11,941Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469771941) {}
[INFO ] 2019-09-03T00:16:11,942Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:16:11,964Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469771941) {}
[INFO ] 2019-09-03T00:16:11,979Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:16:11,982Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469771941) {}
[INFO ] 2019-09-03T00:16:11,987Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:16:12,150Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:16:12,152Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:16:12,152Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:16:12,316Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001612.157\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:16:12,316Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001612.157/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:16:12,317Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001612.157/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:16:12,339Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:16:12,347Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:16:12,354Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:12,354Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:12,354Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:12,358Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:16:12.157Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:16:12,637Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:16:12,638Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001612.157\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:16:12,639Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:16:12,640Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:16:12,642Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:12,642Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:12,697Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:12,702Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:16:12,719Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:16:12,724Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:12,724Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:12,787Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:12,791Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:16:12,791Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469772791) {}
[INFO ] 2019-09-03T00:16:12,793Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:16:12,815Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469772791) {}
[INFO ] 2019-09-03T00:16:12,828Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:16:12,831Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469772791) {}
[INFO ] 2019-09-03T00:16:12,835Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:16:12,996Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:16:12,998Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:16:12,998Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:16:13,069Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001613.003\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:16:13,069Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001613.003/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:16:13,069Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001613.003/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:16:13,179Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:16:13,198Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:16:13,205Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:13,206Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:13,206Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:13,209Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:16:13.003Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:16:13,463Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:16:13,464Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001613.003\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:16:13,464Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:16:13,466Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:16:13,467Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:13,467Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:13,508Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:13,514Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:16:13,536Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:16:13,543Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:13,544Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:13,632Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:13,636Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:16:13,636Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469773636) {}
[INFO ] 2019-09-03T00:16:13,638Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:16:13,663Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469773636) {}
[INFO ] 2019-09-03T00:16:13,680Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:16:13,684Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469773636) {}
[INFO ] 2019-09-03T00:16:13,688Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:16:13,855Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:16:13,857Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:16:13,857Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:16:13,928Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001613.861\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:16:13,929Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001613.861/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:16:13,929Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001613.861/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:16:14,031Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:16:14,039Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:16:14,048Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:14,048Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:14,048Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:16:14,052Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:16:13.861Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:16:14,302Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:16:14,304Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001613.861\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:16:14,304Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:16:14,305Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:16:14,307Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:14,307Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:14,361Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:16:14,371Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:16:14,392Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:16:14,399Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:14,399Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:14,479Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:16:14,483Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:16:14,483Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469774483) {}
[INFO ] 2019-09-03T00:16:14,484Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:16:14,494Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469774483) {}
[INFO ] 2019-09-03T00:16:14,507Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:16:14,509Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469774483) {}
[INFO ] 2019-09-03T00:16:14,514Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:16:14,713Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:16:14,716Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:16:14,716Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:18:28,230Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\angel\Documents\corda\bootcamp-cordapp ... {}
[INFO ] 2019-09-03T00:18:29,727Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001826.426\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:18:29,729Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001826.426/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:18:29,737Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001826.426/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:18:29,866Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:18:30,026Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:18:30,061Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:30,061Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:30,061Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:30,131Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:18:26.413Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:18:32,161Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:18:32,163Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001826.426\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:18:32,164Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:18:32,165Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:18:32,185Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:32,186Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:32,911Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:33,108Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:18:33,144Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:18:33,157Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:33,157Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:33,330Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:33,342Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:18:33,343Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469913342) {}
[INFO ] 2019-09-03T00:18:33,347Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:18:33,443Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469913342) {}
[INFO ] 2019-09-03T00:18:33,477Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:18:33,485Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469913342) {}
[INFO ] 2019-09-03T00:18:33,501Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:18:33,659Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:18:33,661Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:18:33,663Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:18:33,893Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001833.798\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:18:33,893Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001833.798/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:18:33,893Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001833.798/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:18:34,001Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:18:34,011Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:18:34,019Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:34,019Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:34,019Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:34,023Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:18:33.798Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:18:34,374Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:18:34,376Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001833.798\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:18:34,376Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:18:34,378Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:18:34,380Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:34,380Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:34,448Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:34,455Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:18:34,476Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:18:34,481Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:34,481Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:34,556Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:34,559Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:18:34,559Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469914559) {}
[INFO ] 2019-09-03T00:18:34,560Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:18:34,580Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469914559) {}
[INFO ] 2019-09-03T00:18:34,593Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:18:34,595Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469914559) {}
[INFO ] 2019-09-03T00:18:34,599Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:18:34,770Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:18:34,771Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:18:34,772Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:18:34,952Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001834.778\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:18:34,952Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001834.778/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:18:34,952Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001834.778/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:18:34,974Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:18:34,983Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:18:34,997Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:34,997Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:34,997Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:35,000Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:18:34.778Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:18:35,314Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:18:35,316Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001834.778\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:18:35,316Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:18:35,318Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:18:35,320Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:35,321Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:35,369Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:35,376Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:18:35,396Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:18:35,401Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:35,401Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:35,484Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:35,487Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:18:35,487Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469915487) {}
[INFO ] 2019-09-03T00:18:35,489Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:18:35,509Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469915487) {}
[INFO ] 2019-09-03T00:18:35,523Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:18:35,525Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469915487) {}
[INFO ] 2019-09-03T00:18:35,529Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:18:35,687Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:18:35,688Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:18:35,688Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:18:35,846Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001835.694\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:18:35,847Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001835.694/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:18:35,847Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001835.694/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:18:35,867Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:18:35,874Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:18:35,880Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:35,880Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:35,880Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:35,884Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:18:35.694Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:18:36,153Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:18:36,155Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001835.694\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:18:36,156Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:18:36,157Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:18:36,160Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:36,161Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:36,212Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:36,218Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:18:36,234Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:18:36,239Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:36,240Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:36,310Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:36,315Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:18:36,315Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469916315) {}
[INFO ] 2019-09-03T00:18:36,318Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:18:36,339Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469916315) {}
[INFO ] 2019-09-03T00:18:36,355Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:18:36,359Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469916315) {}
[INFO ] 2019-09-03T00:18:36,363Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:18:36,526Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:18:36,528Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:18:36,528Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:18:36,687Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001836.532\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:18:36,688Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001836.532/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:18:36,688Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001836.532/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:18:36,709Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:18:36,717Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:18:36,725Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:36,725Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:36,725Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:36,729Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:18:36.532Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:18:37,010Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:18:37,011Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001836.532\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:18:37,011Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:18:37,012Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:18:37,014Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:37,014Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:37,057Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:37,061Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:18:37,080Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:18:37,086Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:37,086Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:37,169Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:37,173Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:18:37,173Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469917173) {}
[INFO ] 2019-09-03T00:18:37,175Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:18:37,194Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469917173) {}
[INFO ] 2019-09-03T00:18:37,211Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:18:37,213Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469917173) {}
[INFO ] 2019-09-03T00:18:37,218Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:18:37,388Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:18:37,390Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:18:37,390Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:18:37,545Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001837.396\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:18:37,546Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001837.396/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:18:37,546Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001837.396/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:18:37,567Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:18:37,575Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:18:37,583Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:37,583Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:37,583Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:18:37,586Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:18:37.396Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:18:37,912Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:18:37,914Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001837.396\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:18:37,915Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:18:37,916Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:18:37,919Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:37,920Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:37,981Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:18:37,987Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:18:38,006Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:18:38,012Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:38,012Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:38,079Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:18:38,082Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:18:38,082Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469918082) {}
[INFO ] 2019-09-03T00:18:38,084Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:18:38,100Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469918082) {}
[INFO ] 2019-09-03T00:18:38,114Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:18:38,116Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469918082) {}
[INFO ] 2019-09-03T00:18:38,121Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:18:38,308Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:18:38,309Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:18:38,309Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:19:52,349Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\angel\Documents\corda\bootcamp-cordapp ... {}
[INFO ] 2019-09-03T00:19:53,798Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001950.542\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:19:53,800Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001950.542/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:19:53,806Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001950.542/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:19:53,934Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:19:54,094Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:19:54,129Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:54,129Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:54,129Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:54,197Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:19:50.528Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:19:56,099Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:19:56,102Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001950.542\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:19:56,102Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:19:56,104Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:19:56,126Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:19:56,129Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:19:56,848Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:19:57,024Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:19:57,059Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:19:57,072Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:19:57,073Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:19:57,237Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:19:57,243Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:19:57,243Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469997243) {}
[INFO ] 2019-09-03T00:19:57,246Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:19:57,351Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469997243) {}
[INFO ] 2019-09-03T00:19:57,385Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:19:57,393Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469997243) {}
[INFO ] 2019-09-03T00:19:57,409Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:19:57,567Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:19:57,569Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:19:57,571Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:19:57,805Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001957.699\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:19:57,806Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001957.699/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:19:57,806Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001957.699/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:19:57,910Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:19:57,919Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:19:57,926Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:57,926Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:57,927Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:57,931Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:19:57.699Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:19:58,251Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:19:58,253Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001957.699\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:19:58,253Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:19:58,255Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:19:58,257Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:19:58,257Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:19:58,310Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:19:58,317Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:19:58,334Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:19:58,340Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:19:58,340Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:19:58,411Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:19:58,414Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:19:58,414Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469998414) {}
[INFO ] 2019-09-03T00:19:58,415Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:19:58,436Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469998414) {}
[INFO ] 2019-09-03T00:19:58,448Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:19:58,452Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469998414) {}
[INFO ] 2019-09-03T00:19:58,457Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:19:58,645Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:19:58,648Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:19:58,648Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:19:58,735Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001958.654\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:19:58,735Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001958.654/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:19:58,736Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001958.654/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:19:58,839Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:19:58,846Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:19:58,860Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:58,860Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:58,860Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:58,864Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:19:58.654Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:19:59,159Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:19:59,160Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001958.654\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:19:59,160Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:19:59,162Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:19:59,163Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:19:59,164Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:19:59,207Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:19:59,213Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:19:59,233Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:19:59,239Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:19:59,239Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:19:59,319Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:19:59,323Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:19:59,323Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469999323) {}
[INFO ] 2019-09-03T00:19:59,325Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:19:59,345Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469999323) {}
[INFO ] 2019-09-03T00:19:59,362Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:19:59,366Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567469999323) {}
[INFO ] 2019-09-03T00:19:59,370Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:19:59,542Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:19:59,544Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:19:59,544Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:19:59,622Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-001959.548\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:19:59,622Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001959.548/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:19:59,622Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-001959.548/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:19:59,741Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:19:59,754Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:19:59,762Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:59,762Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:59,762Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:19:59,767Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:19:59.548Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:20:00,067Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:20:00,068Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-001959.548\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:20:00,068Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:20:00,069Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:20:00,071Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,072Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,115Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,121Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:20:00,137Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:20:00,143Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,143Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,208Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,211Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:20:00,211Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470000211) {}
[INFO ] 2019-09-03T00:20:00,213Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:20:00,229Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470000211) {}
[INFO ] 2019-09-03T00:20:00,242Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:20:00,244Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470000211) {}
[INFO ] 2019-09-03T00:20:00,248Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:20:00,410Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:20:00,412Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:20:00,412Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:20:00,562Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002000.417\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:20:00,563Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002000.417/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:20:00,563Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002000.417/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:20:00,584Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:20:00,593Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:20:00,600Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:20:00,600Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:20:00,600Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:20:00,602Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:20:00.417Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:20:00,854Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:20:00,856Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002000.417\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:20:00,856Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:20:00,858Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:20:00,861Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,861Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,902Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,908Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:20:00,923Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:20:00,928Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,929Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,989Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:20:00,992Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:20:00,992Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470000992) {}
[INFO ] 2019-09-03T00:20:00,993Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:20:01,010Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470000992) {}
[INFO ] 2019-09-03T00:20:01,024Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:20:01,027Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470000992) {}
[INFO ] 2019-09-03T00:20:01,031Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:20:01,181Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:20:01,182Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:20:01,182Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:20:01,342Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002001.185\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:20:01,342Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002001.185/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:20:01,342Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002001.185/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:20:01,363Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:20:01,372Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:20:01,379Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:20:01,379Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:20:01,379Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:20:01,383Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:20:01.185Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:20:01,610Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:20:01,612Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002001.185\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:20:01,612Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:20:01,614Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:20:01,616Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:20:01,616Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:20:01,659Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:20:01,664Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:20:01,677Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:20:01,683Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:20:01,683Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:20:01,741Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:20:01,744Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:20:01,744Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470001744) {}
[INFO ] 2019-09-03T00:20:01,745Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:20:01,763Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470001744) {}
[INFO ] 2019-09-03T00:20:01,778Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:20:01,782Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470001744) {}
[INFO ] 2019-09-03T00:20:01,787Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:20:01,956Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:20:01,957Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:20:01,957Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:21:15,235Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\angel\Documents\corda\bootcamp-cordapp ... {}
[INFO ] 2019-09-03T00:21:16,793Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002112.610\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:21:16,795Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002112.610/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:21:16,809Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002112.610/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:21:16,971Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:21:17,280Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:21:17,329Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:17,330Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:17,331Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:17,420Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:21:12.501Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:21:19,661Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:21:19,663Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002112.610\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:21:19,663Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:21:19,665Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:21:19,689Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:19,692Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:20,693Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:21,020Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:21:21,053Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:21:21,064Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:21,065Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:21,260Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:21,285Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:21:21,286Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470081286) {}
[INFO ] 2019-09-03T00:21:21,289Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:21:21,399Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470081286) {}
[INFO ] 2019-09-03T00:21:21,439Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:21:21,448Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470081286) {}
[INFO ] 2019-09-03T00:21:21,465Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:21:21,639Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:21:21,642Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:21:21,644Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:21:21,926Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002121.826\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:21:21,926Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002121.826/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:21:21,926Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002121.826/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:21:22,042Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:21:22,051Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:21:22,058Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:22,058Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:22,058Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:22,062Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:21:21.826Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:21:22,366Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:21:22,369Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002121.826\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:21:22,369Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:21:22,370Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:21:22,372Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:22,373Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:22,427Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:22,435Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:21:22,456Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:21:22,461Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:22,461Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:22,537Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:22,540Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:21:22,540Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470082540) {}
[INFO ] 2019-09-03T00:21:22,542Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:21:22,551Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470082540) {}
[INFO ] 2019-09-03T00:21:22,564Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:21:22,567Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470082540) {}
[INFO ] 2019-09-03T00:21:22,572Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:21:22,749Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:21:22,751Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:21:22,751Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:21:22,813Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002122.758\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:21:22,814Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002122.758/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:21:22,814Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002122.758/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:21:22,916Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:21:22,925Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:21:22,939Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:22,939Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:22,939Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:22,942Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:21:22.758Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:21:23,257Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:21:23,259Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002122.758\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:21:23,259Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:21:23,261Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:21:23,263Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:23,263Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:23,310Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:23,318Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:21:23,341Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:21:23,347Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:23,347Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:23,431Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:23,434Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:21:23,434Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470083434) {}
[INFO ] 2019-09-03T00:21:23,435Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:21:23,456Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470083434) {}
[INFO ] 2019-09-03T00:21:23,468Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:21:23,471Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470083434) {}
[INFO ] 2019-09-03T00:21:23,476Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:21:23,633Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:21:23,635Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:21:23,635Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:21:23,791Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002123.640\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:21:23,792Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002123.640/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:21:23,792Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002123.640/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:21:23,815Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:21:23,827Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:21:23,835Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:23,835Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:23,835Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:23,839Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:21:23.640Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:21:24,104Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:21:24,107Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002123.640\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:21:24,107Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:21:24,108Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:21:24,112Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,112Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,155Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,160Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:21:24,174Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:21:24,179Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,179Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,244Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,246Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:21:24,246Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470084246) {}
[INFO ] 2019-09-03T00:21:24,247Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:21:24,257Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470084246) {}
[INFO ] 2019-09-03T00:21:24,269Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:21:24,271Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470084246) {}
[INFO ] 2019-09-03T00:21:24,277Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:21:24,421Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:21:24,422Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:21:24,422Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:21:24,567Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002124.426\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:21:24,567Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002124.426/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:21:24,567Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002124.426/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:21:24,588Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:21:24,597Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:21:24,604Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:24,604Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:24,604Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:24,608Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:21:24.426Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:21:24,844Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:21:24,846Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002124.426\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:21:24,846Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:21:24,847Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:21:24,850Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,850Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,893Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,898Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:21:24,912Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:21:24,916Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,916Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,975Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:24,979Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:21:24,979Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470084979) {}
[INFO ] 2019-09-03T00:21:24,981Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:21:24,997Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470084979) {}
[INFO ] 2019-09-03T00:21:25,009Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:21:25,011Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470084979) {}
[INFO ] 2019-09-03T00:21:25,014Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:21:25,174Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:21:25,175Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:21:25,175Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:21:25,242Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002125.180\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:21:25,242Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002125.180/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:21:25,242Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002125.180/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:21:25,349Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:21:25,358Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:21:25,365Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:25,365Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:25,365Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:21:25,369Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:21:25.180Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:21:25,596Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:21:25,597Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002125.180\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:21:25,597Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:21:25,598Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:21:25,600Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:25,600Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:25,642Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:21:25,647Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:21:25,661Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:21:25,666Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:25,666Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:25,730Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:21:25,734Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:21:25,734Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470085734) {}
[INFO ] 2019-09-03T00:21:25,736Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:21:25,747Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470085734) {}
[INFO ] 2019-09-03T00:21:25,757Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:21:25,760Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470085734) {}
[INFO ] 2019-09-03T00:21:25,764Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:21:25,915Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:21:25,916Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:21:25,916Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:23:36,185Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\angel\Documents\corda\bootcamp-cordapp ... {}
[INFO ] 2019-09-03T00:23:38,218Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002333.288\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:23:38,223Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002333.288/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:23:38,245Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002333.288/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:23:38,479Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:23:38,902Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:23:38,987Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:38,988Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:38,989Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:39,128Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:23:33.180Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:23:41,601Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:23:41,604Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002333.288\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:23:41,604Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:23:41,606Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:23:41,632Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:41,634Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:42,670Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:42,983Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:23:43,013Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:23:43,024Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:43,024Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:43,201Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:43,207Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:23:43,207Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470223207) {}
[INFO ] 2019-09-03T00:23:43,210Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:23:43,301Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470223207) {}
[INFO ] 2019-09-03T00:23:43,335Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:23:43,344Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470223207) {}
[INFO ] 2019-09-03T00:23:43,361Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:23:43,529Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:23:43,531Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:23:43,533Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:23:43,802Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002343.715\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:23:43,802Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002343.715/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:23:43,802Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002343.715/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:23:43,907Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:23:43,920Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:23:43,929Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:43,929Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:43,929Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:43,934Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:23:43.715Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:23:44,244Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:23:44,246Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002343.715\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:23:44,246Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:23:44,248Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:23:44,250Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:44,250Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:44,305Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:44,313Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:23:44,330Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:23:44,335Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:44,335Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:44,410Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:44,413Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:23:44,413Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470224413) {}
[INFO ] 2019-09-03T00:23:44,414Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:23:44,423Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470224413) {}
[INFO ] 2019-09-03T00:23:44,435Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:23:44,437Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470224413) {}
[INFO ] 2019-09-03T00:23:44,440Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:23:44,616Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:23:44,618Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:23:44,618Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:23:44,684Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002344.626\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:23:44,685Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002344.626/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:23:44,685Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002344.626/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:23:44,807Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:23:44,818Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:23:44,833Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:44,833Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:44,833Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:44,837Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:23:44.626Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:23:45,126Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:23:45,128Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002344.626\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:23:45,128Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:23:45,130Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:23:45,132Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:45,133Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:45,178Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:45,185Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:23:45,202Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:23:45,208Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:45,208Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:45,280Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:45,284Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:23:45,284Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470225284) {}
[INFO ] 2019-09-03T00:23:45,286Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:23:45,307Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470225284) {}
[INFO ] 2019-09-03T00:23:45,322Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:23:45,325Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470225284) {}
[INFO ] 2019-09-03T00:23:45,330Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:23:45,487Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:23:45,490Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:23:45,490Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:23:45,576Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002345.498\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:23:45,576Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002345.498/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:23:45,577Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002345.498/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:23:45,678Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:23:45,686Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:23:45,693Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:45,694Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:45,694Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:45,698Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:23:45.498Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:23:45,949Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:23:45,950Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002345.498\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:23:45,950Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:23:45,951Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:23:45,953Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:45,953Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:45,997Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,003Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:23:46,020Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:23:46,025Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,025Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,092Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,095Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:23:46,095Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470226095) {}
[INFO ] 2019-09-03T00:23:46,097Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:23:46,104Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470226095) {}
[INFO ] 2019-09-03T00:23:46,117Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:23:46,121Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470226095) {}
[INFO ] 2019-09-03T00:23:46,126Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:23:46,282Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:23:46,283Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:23:46,283Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:23:46,426Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002346.289\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:23:46,427Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002346.289/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:23:46,427Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002346.289/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:23:46,447Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:23:46,455Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:23:46,462Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:46,462Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:46,462Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:46,466Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:23:46.289Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:23:46,699Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:23:46,702Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002346.289\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:23:46,702Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:23:46,705Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:23:46,708Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,708Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,753Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,759Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:23:46,773Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:23:46,777Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,778Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,838Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:46,842Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:23:46,842Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470226842) {}
[INFO ] 2019-09-03T00:23:46,843Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:23:46,861Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470226842) {}
[INFO ] 2019-09-03T00:23:46,875Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:23:46,879Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470226842) {}
[INFO ] 2019-09-03T00:23:46,883Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:23:47,050Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:23:47,052Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:23:47,052Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:23:47,125Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002347.057\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:23:47,125Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002347.057/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:23:47,125Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002347.057/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:23:47,232Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:23:47,240Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:23:47,247Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:47,248Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:47,248Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:23:47,251Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:23:47.057Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:23:47,486Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:23:47,487Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002347.057\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:23:47,487Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:23:47,488Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:23:47,489Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:47,489Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:47,529Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:23:47,535Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:23:47,550Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:23:47,555Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:47,555Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:47,618Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:23:47,621Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:23:47,621Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470227621) {}
[INFO ] 2019-09-03T00:23:47,624Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:23:47,632Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470227621) {}
[INFO ] 2019-09-03T00:23:47,645Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:23:47,648Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470227621) {}
[INFO ] 2019-09-03T00:23:47,652Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:23:47,825Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:23:47,826Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:23:47,826Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:26:22,332Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\angel\Documents\corda\bootcamp-cordapp ... {}
[INFO ] 2019-09-03T00:26:23,759Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002620.543\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:26:23,761Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002620.543/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:26:23,767Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002620.543/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:26:23,896Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:26:24,054Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:26:24,089Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:24,090Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:24,090Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:24,163Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:26:20.528Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:26:26,111Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:26:26,114Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002620.543\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:26:26,114Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:26:26,115Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:26:26,134Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:26,137Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:26,870Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:27,064Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:26:27,097Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:26:27,108Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:27,108Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:27,273Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:27,279Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:26:27,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470387279) {}
[INFO ] 2019-09-03T00:26:27,283Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:26:27,387Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470387279) {}
[INFO ] 2019-09-03T00:26:27,422Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:26:27,430Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470387279) {}
[INFO ] 2019-09-03T00:26:27,449Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:26:27,616Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:26:27,619Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:26:27,620Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:26:27,851Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002627.751\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:26:27,851Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002627.751/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:26:27,851Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002627.751/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:26:27,959Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:26:27,967Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:26:27,975Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:27,975Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:27,975Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:27,979Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:26:27.751Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:26:28,295Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:26:28,298Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002627.751\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:26:28,298Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:26:28,299Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:26:28,300Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:28,301Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:28,350Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:28,358Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:26:28,374Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:26:28,379Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:28,380Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:28,453Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:28,456Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:26:28,456Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470388456) {}
[INFO ] 2019-09-03T00:26:28,457Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:26:28,476Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470388456) {}
[INFO ] 2019-09-03T00:26:28,491Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:26:28,493Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470388456) {}
[INFO ] 2019-09-03T00:26:28,497Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:26:28,661Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:26:28,663Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:26:28,663Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:26:28,744Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002628.669\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:26:28,745Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002628.669/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:26:28,745Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002628.669/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:26:28,862Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:26:28,880Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:26:28,913Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:28,914Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:28,914Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:28,922Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:26:28.669Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:26:29,218Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:26:29,219Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002628.669\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:26:29,220Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:26:29,220Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:26:29,221Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:29,222Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:29,267Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:29,274Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:26:29,299Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:26:29,305Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:29,305Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:29,391Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:29,395Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:26:29,395Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470389395) {}
[INFO ] 2019-09-03T00:26:29,396Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:26:29,418Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470389395) {}
[INFO ] 2019-09-03T00:26:29,431Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:26:29,434Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470389395) {}
[INFO ] 2019-09-03T00:26:29,438Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:26:29,599Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:26:29,601Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:26:29,601Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:26:29,676Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002629.607\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:26:29,676Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002629.607/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:26:29,676Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002629.607/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:26:29,791Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:26:29,800Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:26:29,807Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:29,807Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:29,807Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:29,812Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:26:29.607Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:26:30,064Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:26:30,066Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002629.607\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:26:30,066Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:26:30,067Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:26:30,069Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,069Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,112Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,118Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:26:30,138Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:26:30,143Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,143Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,220Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,224Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:26:30,224Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470390224) {}
[INFO ] 2019-09-03T00:26:30,226Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:26:30,246Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470390224) {}
[INFO ] 2019-09-03T00:26:30,261Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:26:30,265Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470390224) {}
[INFO ] 2019-09-03T00:26:30,270Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:26:30,424Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:26:30,426Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:26:30,427Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:26:30,496Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002630.431\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:26:30,497Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002630.431/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:26:30,497Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002630.431/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:26:30,606Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:26:30,614Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:26:30,622Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:30,623Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:30,623Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:30,626Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:26:30.431Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:26:30,844Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:26:30,845Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002630.431\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:26:30,845Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:26:30,846Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:26:30,848Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,848Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,890Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,895Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:26:30,909Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:26:30,914Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,914Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,980Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:30,982Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:26:30,983Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470390982) {}
[INFO ] 2019-09-03T00:26:30,984Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:26:31,002Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470390982) {}
[INFO ] 2019-09-03T00:26:31,019Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:26:31,021Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470390982) {}
[INFO ] 2019-09-03T00:26:31,026Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:26:31,183Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:26:31,185Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:26:31,185Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:26:31,256Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002631.190\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:26:31,257Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002631.190/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:26:31,257Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002631.190/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:26:31,360Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:26:31,368Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:26:31,374Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:31,375Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:31,375Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:26:31,379Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:26:31.190Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:26:31,641Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:26:31,642Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002631.190\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:26:31,642Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:26:31,644Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:26:31,646Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:31,646Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:31,685Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:26:31,690Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:26:31,708Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:26:31,713Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:31,713Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:31,783Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:26:31,786Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:26:31,786Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470391786) {}
[INFO ] 2019-09-03T00:26:31,787Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:26:31,809Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470391786) {}
[INFO ] 2019-09-03T00:26:31,819Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:26:31,821Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470391786) {}
[INFO ] 2019-09-03T00:26:31,825Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:26:31,972Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:26:31,974Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:26:31,974Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:27:13,683Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\angel\Documents\corda\bootcamp-cordapp ... {}
[INFO ] 2019-09-03T00:27:15,136Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002711.888\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:27:15,138Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002711.888/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:27:15,145Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002711.888/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:27:15,275Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:27:15,435Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:27:15,467Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:15,467Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:15,468Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:15,534Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:27:11.875Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:27:17,494Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:27:17,499Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002711.888\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:27:17,499Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:27:17,501Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:27:17,523Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:17,525Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:18,274Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:18,469Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:27:18,502Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:27:18,514Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:18,514Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:18,675Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:18,682Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:27:18,682Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470438682) {}
[INFO ] 2019-09-03T00:27:18,685Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:27:18,789Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470438682) {}
[INFO ] 2019-09-03T00:27:18,831Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:27:18,842Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470438682) {}
[INFO ] 2019-09-03T00:27:18,858Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:27:19,022Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:27:19,024Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:27:19,026Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:27:19,248Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002719.156\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:27:19,249Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002719.156/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:27:19,249Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002719.156/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:27:19,354Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:27:19,362Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:27:19,370Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:19,370Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:19,370Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:19,374Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:27:19.156Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:27:19,697Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:27:19,699Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002719.156\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:27:19,699Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:27:19,700Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:27:19,702Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:19,702Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:19,755Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:19,764Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:27:19,782Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:27:19,787Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:19,787Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:19,862Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:19,866Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:27:19,866Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470439866) {}
[INFO ] 2019-09-03T00:27:19,867Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:27:19,890Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470439866) {}
[INFO ] 2019-09-03T00:27:19,905Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:27:19,908Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470439866) {}
[INFO ] 2019-09-03T00:27:19,912Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:27:20,078Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:27:20,079Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:27:20,079Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:27:20,237Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002720.084\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:27:20,238Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002720.084/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:27:20,238Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002720.084/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:27:20,258Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:27:20,267Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:27:20,274Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:20,274Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:20,274Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:20,278Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:27:20.084Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:27:20,589Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:27:20,591Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002720.084\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:27:20,591Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:27:20,593Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:27:20,594Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:20,594Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:20,637Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:20,642Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:27:20,661Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:27:20,666Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:20,666Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:20,743Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:20,746Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:27:20,747Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470440746) {}
[INFO ] 2019-09-03T00:27:20,748Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:27:20,769Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470440746) {}
[INFO ] 2019-09-03T00:27:20,782Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:27:20,785Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470440746) {}
[INFO ] 2019-09-03T00:27:20,789Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:27:20,969Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:27:20,971Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:27:20,972Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:27:21,127Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002720.978\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:27:21,128Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002720.978/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:27:21,128Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002720.978/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:27:21,149Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:27:21,157Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:27:21,163Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:21,163Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:21,163Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:21,167Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:27:20.978Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:27:21,426Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:27:21,428Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002720.978\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:27:21,428Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:27:21,430Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:27:21,432Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:21,432Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:21,478Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:21,484Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:27:21,506Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:27:21,511Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:21,511Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:21,576Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:21,579Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:27:21,579Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470441579) {}
[INFO ] 2019-09-03T00:27:21,581Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:27:21,603Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470441579) {}
[INFO ] 2019-09-03T00:27:21,617Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:27:21,620Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470441579) {}
[INFO ] 2019-09-03T00:27:21,626Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:27:21,775Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:27:21,777Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:27:21,777Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:27:21,856Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002721.782\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:27:21,857Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002721.782/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:27:21,857Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002721.782/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:27:21,959Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:27:21,968Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:27:21,975Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:21,975Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:21,975Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:21,979Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:27:21.782Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:27:22,225Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:27:22,227Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002721.782\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:27:22,227Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:27:22,228Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:27:22,230Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:22,230Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:22,270Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:22,276Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:27:22,291Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:27:22,296Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:22,296Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:22,370Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:22,374Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:27:22,374Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470442374) {}
[INFO ] 2019-09-03T00:27:22,376Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:27:22,399Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470442374) {}
[INFO ] 2019-09-03T00:27:22,414Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:27:22,418Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470442374) {}
[INFO ] 2019-09-03T00:27:22,422Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:27:22,587Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:27:22,589Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:27:22,589Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:27:22,758Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-002722.594\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:27:22,759Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002722.594/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:27:22,759Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-002722.594/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:27:22,778Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:27:22,786Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:27:22,794Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:22,794Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:22,794Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:27:22,799Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:27:22.594Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:27:23,045Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:27:23,047Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-002722.594\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:27:23,047Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:27:23,048Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:27:23,051Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:23,051Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:23,094Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:27:23,100Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:27:23,115Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:27:23,121Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:23,121Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:23,183Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:27:23,186Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:27:23,186Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470443186) {}
[INFO ] 2019-09-03T00:27:23,187Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:27:23,206Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470443186) {}
[INFO ] 2019-09-03T00:27:23,221Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:27:23,224Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470443186) {}
[INFO ] 2019-09-03T00:27:23,229Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:27:23,404Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:27:23,406Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:27:23,406Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:30:46,851Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\angel\Documents\corda\bootcamp-cordapp ... {}
[INFO ] 2019-09-03T00:30:48,307Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-003045.059\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:30:48,309Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003045.059/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:30:48,316Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003045.059/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:30:48,451Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:30:48,608Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:30:48,642Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:48,642Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:48,643Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:48,714Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:30:45.045Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:30:50,682Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:30:50,684Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-003045.059\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:30:50,684Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:30:50,686Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:30:50,705Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:50,708Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:51,417Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:51,597Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:30:51,629Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:30:51,641Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:51,641Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:51,797Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:51,804Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:30:51,804Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470651804) {}
[INFO ] 2019-09-03T00:30:51,807Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:30:51,898Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470651804) {}
[INFO ] 2019-09-03T00:30:51,931Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:30:51,939Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470651804) {}
[INFO ] 2019-09-03T00:30:51,955Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:30:52,103Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:30:52,105Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:30:52,108Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:30:52,346Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-003052.248\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:30:52,346Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003052.248/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:30:52,346Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003052.248/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:30:52,452Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:30:52,461Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:30:52,468Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:52,468Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:52,468Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:52,472Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:30:52.248Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:30:52,790Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:30:52,792Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-003052.248\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:30:52,792Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:30:52,793Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:30:52,796Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:52,796Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:52,849Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:52,855Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:30:52,877Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:30:52,882Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:52,882Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:52,969Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:52,972Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:30:52,972Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470652972) {}
[INFO ] 2019-09-03T00:30:52,974Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:30:52,993Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470652972) {}
[INFO ] 2019-09-03T00:30:53,004Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:30:53,007Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470652972) {}
[INFO ] 2019-09-03T00:30:53,011Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:30:53,186Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:30:53,188Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:30:53,188Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:30:53,271Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-003053.194\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:30:53,272Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003053.194/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:30:53,272Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003053.194/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:30:53,387Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:30:53,397Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:30:53,414Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:53,414Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:53,414Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:53,419Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:30:53.194Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:30:53,725Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:30:53,728Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-003053.194\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:30:53,728Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:30:53,730Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:30:53,733Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:53,733Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:53,786Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:53,793Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:30:53,815Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:30:53,820Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:53,820Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:53,902Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:53,906Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:30:53,906Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470653906) {}
[INFO ] 2019-09-03T00:30:53,908Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:30:53,928Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470653906) {}
[INFO ] 2019-09-03T00:30:53,943Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:30:53,946Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470653906) {}
[INFO ] 2019-09-03T00:30:53,950Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:30:54,113Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:30:54,114Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:30:54,114Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:30:54,193Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-003054.121\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:30:54,193Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003054.121/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:30:54,193Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003054.121/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:30:54,295Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:30:54,303Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:30:54,311Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:54,311Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:54,311Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:54,316Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:30:54.121Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:30:54,618Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:30:54,619Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-003054.121\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:30:54,619Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:30:54,620Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:30:54,622Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:54,622Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:54,664Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:54,670Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:30:54,687Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:30:54,692Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:54,692Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:54,759Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:54,762Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:30:54,762Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470654762) {}
[INFO ] 2019-09-03T00:30:54,763Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:30:54,783Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470654762) {}
[INFO ] 2019-09-03T00:30:54,797Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:30:54,800Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470654762) {}
[INFO ] 2019-09-03T00:30:54,804Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:30:54,967Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:30:54,968Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:30:54,968Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:30:55,035Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-003054.973\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:30:55,036Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003054.973/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:30:55,036Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003054.973/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:30:55,140Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:30:55,147Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:30:55,154Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:55,154Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:55,154Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:55,157Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:30:54.973Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:30:55,412Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:30:55,413Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-003054.973\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:30:55,413Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:30:55,415Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:30:55,417Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:55,417Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:55,456Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:55,461Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:30:55,478Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:30:55,483Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:55,483Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:55,543Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:55,546Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:30:55,546Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470655546) {}
[INFO ] 2019-09-03T00:30:55,547Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:30:55,563Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470655546) {}
[INFO ] 2019-09-03T00:30:55,575Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:30:55,577Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470655546) {}
[INFO ] 2019-09-03T00:30:55,581Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:30:55,729Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:30:55,730Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:30:55,730Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-03T00:30:55,796Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190903-003055.734\nodes\0\cordapps] {}
[INFO ] 2019-09-03T00:30:55,796Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003055.734/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2019-09-03T00:30:55,796Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/angel/Documents/corda/bootcamp-cordapp/build/mock-network/20190903-003055.734/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2019-09-03T00:30:55,898Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-03T00:30:55,905Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-03T00:30:55,912Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:55,912Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:55,912Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-03T00:30:55,916Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-03T00:30:55.734Z
      epoch=1
  } {}
[INFO ] 2019-09-03T00:30:56,175Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-03T00:30:56,177Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190903-003055.734\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-03T00:30:56,177Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-03T00:30:56,178Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-03T00:30:56,181Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:56,181Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:56,223Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-03T00:30:56,227Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-03T00:30:56,243Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-03T00:30:56,247Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:56,248Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:56,305Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-03T00:30:56,307Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-03T00:30:56,307Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470656307) {}
[INFO ] 2019-09-03T00:30:56,309Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-03T00:30:56,325Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470656307) {}
[INFO ] 2019-09-03T00:30:56,336Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-03T00:30:56,339Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1567470656307) {}
[INFO ] 2019-09-03T00:30:56,343Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-03T00:30:56,507Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=FEE23F61FB8320D5D2417470AC36A5EF445304A554593A613B0D9EAFA0BF7EA5 uploader=app filename=null {}
[INFO ] 2019-09-03T00:30:56,508Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-03T00:30:56,509Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
